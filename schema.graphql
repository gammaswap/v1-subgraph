enum LoanStatus {
  OPEN
  CLOSED
  LIQUIDATED
}

enum LoanSnapshotType {
  INCREASE_COLLATERAL
  DECREASE_COLLATERAL
  REBALANCE_COLLATERAL
  BORROW_LIQUIDITY
  REPAY_LIQUIDITY
  REPAY_LIQUIDITY_SET_RATIO
  REPAY_LIQUIDITY_WITH_LP
  LIQUIDATE
  LIQUIDATE_WITH_LP
  BATCH_LIQUIDATION
  EXTERNAL_REBALANCE
  EXTERNAL_LIQUIDATION
  UPDATE_POOL
}

type GammaPool @entity {
  """
  Primary pool attributes
  Initialized once at the time of creation from GammaPoolPoolFactory contract
  """
  # {PoolAddress}
  id: ID!
  # {PoolAddress}
  address: Bytes!
  # CFMM address
  cfmm: Bytes!
  # DEX protocol (Sushiswap, Deltaswap ...)
  # protocol: Protocol!
  protocolId: BigInt!
  # Underlying token0 address
  token0: Token!
  # Underlying token1 address
  token1: Token!

  # Short Strategy Address
  shortStrategy: Bytes!
  # Borrow Strategy Address
  borrowStrategy: Bytes!
  # Repay Strategy Address
  repayStrategy: Bytes!
  # Rebalance Strategy Address
  rebalanceStrategy: Bytes!
  # Single Liquidation Strategy Address
  singleLiquidationStrategy: Bytes!
  # Batch Liquidation Strategy Address
  batchLiquidationStrategy: Bytes!

  """
  Raw pool storage variables
  All these values get updated with user txns
  """
  # CFMM's LP tokens deposited in GammaPool by LPs
  lpBalance: BigInt!
  # CFMM's LP tokens that have been borrowed by liquidity borrowers excluding accrued interest (principal)
  lpBorrowedBalance: BigInt!
  # CFMM's LP tokens that have been borrowed by liquidity borrowers including accrued interest
  lpBorrowedBalancePlusInterest: BigInt!
  # CFMM's liquidity invariant held in GammaPool as LP tokens, maps to {lpBalance}
  lpInvariant: BigInt!
  # CFMM's liquidity invariant that has been borrowed including accrued interest, maps to {lpBorrowedBalancePlusInterest}
  lpBorrowedInvariant: BigInt!
  # GammaPool's ever increasing interest rate index, tracks interest accrued through CFMM and liquidity loans, max 7.9% trillion
  accFeeIndex: BigInt!
  # percent accrual in CFMM invariant since last update
  lastCfmmFeeIndex: BigInt!
  # Total liquidity invariant amount in CFMM (from GammaPool and others)
  lastCfmmInvariant: BigInt!
  # Total LP token supply from CFMM (belonging to GammaPool and others)
  lastCfmmTotalSupply: BigInt!
  # GammaPool's total interest rate(CFMM rate plus Borrow rate) since last update
  lastFeeIndex: BigInt!
  # Current price at CFMM
  lastPrice: BigInt!

  """
  Derived values from the very section above
  Mostly ETH/USD value equivalents for 3rd party apps
  """
  # GammaPool LP tokens as ETH value, maps to {lpBalance}
  lpBalanceETH: BigDecimal!
  # GammaPool LP tokens as USD value, maps to {lpBalance}
  lpBalanceUSD: BigDecimal!
  # GammaPool LP tokens as priced with token0, maps to {lpBalance}
  lpBalanceInToken0: BigDecimal!
  # GammaPool LP tokens as priced with token1, maps to {lpBalance}
  lpBalanceInToken1: BigDecimal!
  # Borrowed assets as ETH value, maps to {lpBorrowedBalance}
  lpBorrowedBalanceETH: BigDecimal!
  lpBorrowedBalanceUSD: BigDecimal!
  lpBorrowedBalanceInToken0: BigDecimal!
  lpBorrowedBalanceInToken1: BigDecimal!
  # Borrowed assets(including accrued fees) as ETH value, maps to {lpBorrowedBalancePlusInterest}
  lpBorrowedBalancePlusInterestETH: BigDecimal!
  lpBorrowedBalancePlusInterestUSD: BigDecimal!
  lpBorrowedBalancePlusInterestInToken0: BigDecimal!
  lpBorrowedBalancePlusInterestInToken1: BigDecimal!
  # Maps to {lpBalanceETH} + {lpBorrowedBalancePlusInterestETH}
  tvlETH: BigDecimal!
  # Maps to {lpBalanceUSD} + {lpBorrowedBalancePlusInterestUSD}
  tvlUSD: BigDecimal!
  # CFMM's total liquidity as ETH value, maps to {lastCfmmInvariant}
  lastCfmmETH: BigDecimal!
  lastCfmmUSD: BigDecimal!
  lastCfmmInToken0: BigDecimal!
  lastCfmmInToken1: BigDecimal!

  """
  Other GammaPool storage values
  """
  # GammaPool's GS-LP total supply
  totalSupply: BigInt!
  # Total amounts of token0 for loan collaterals
  token0Balance: BigInt!
  # Total amounts of token1 for loan collaterals
  token1Balance: BigInt!
  # Total amounts of token0 reserves
  reserve0Balance: BigInt!
  # Total amounts of token1 reserves
  reserve1Balance: BigInt!
  # Borrow APR of LP tokens in GammaPool
  borrowRate: BigInt!
  # Supply APR of LP tokens in GammaPool
  supplyRate: BigInt!
  # Utilization rate of GammaPool, {supplyRate} = {borrowRate} * {utilizationRate}
  utilizationRate: BigInt!
  # EMA of utilization rate
  emaUtilRate: BigInt!
  # Multiplier of EMA used to calculate emaUtilRate
  emaMultiplier: Int!
  # Minimum utilization rate at which point we start using the dynamic fee
  minUtilRate1: Int!
  # Minimum utilization rate at which point we start using the dynamic fee
  minUtilRate2: Int!
  # Dynamic origination fee divisor, to cap at 99% use 16384 = 2^(99-85)
  feeDivisor: Int!
  # Loan opening origination fee in basis points
  origFee: Int!
  # LTV liquidation threshold
  ltvThreshold: BigInt!
  # Liquidation fee
  liquidationFee: BigInt!
  # Has staking trackers
  hasStakingTrackers: Boolean!
  # Staking is active
  activeStaking: Boolean!

  # Total amounts of token0 borrowed
  borrowedBalance0: BigInt!
  # Total amounts of token1 borrowed
  borrowedBalance1: BigInt!

  # token0 amount in CFMM
  lpReserve0: BigInt!
  # token1 amount in CFMM
  lpReserve1: BigInt!

  block: BigInt!
  timestamp: BigInt!

  loans: [Loan!] @derivedFrom(field: "pool")
  liquidations: [Liquidation!] @derivedFrom(field: "pool")
}

type Loan @entity {
  """
  Primary Loan attributes
  Initialized once at the time of loan creation
  """
  # {PoolAddress}-{tokenId}
  id: ID!
  # Unique tokenId to identify loan across all GammaPools, hash of GammaPool address, sender address, and loan counter
  tokenId: BigInt!
  # Underlying GammaPool entity
  pool: GammaPool!
  # DEX protocol (Sushiswap, Deltaswap ...)
  protocol: Protocol!
  # Owner of the loan
  account: Account!
  # Manager of the loan
  manager: Bytes!
  # Token0 of the loan
  token0: Token!
  # Token1 of the loan
  token1: Token!

  """
  Loan attributes updated over time
  """
  # GammaPool interest rate at time loan is created/updated, maps to {GammaPool -> accFeeIndex}
  rateIndex: BigInt!
  # Initial loan debt in liquidity invariant units. Only increase when more liquidity is borrowed, decreases when liquidity is paid
  initLiquidity: BigInt!
  initLiquidityETH: BigDecimal!
  initLiquidityUSD: BigDecimal!
  # Loan debt in liquidity invariant units, increases with every update according to how many blocks have passed
  liquidity: BigInt!
  liquidityETH: BigDecimal!
  liquidityUSD: BigDecimal!
  # Initial loan debt in terms of LP tokens at time liquidity was borrowed, updates along with {initLiquidity}
  lpTokens: BigInt!
  # Reserved token0 amounts held as collateral for the liquidity debt
  collateral0: BigInt!
  # Reserved token1 amounts held as collateral for the liquidity debt
  collateral1: BigInt!
  # Price at which loan was opened
  entryPrice: BigInt!

  """
  Extra loan information
  """
  # Loan Status
  status: LoanStatus!
  # Block number at which loan was opened
  openedAtBlock: BigInt!
  # Txhash at which loan was opened
  openedAtTxhash: String!
  # Timestamp at which loan was opened
  openedAtTimestamp: BigInt!
  # Block number at which loan was closed
  closedAtBlock: BigInt
  # Txhash at which loan was closed
  closedAtTxhash: String!
  # Timestamp at which loan was closed
  closedAtTimestamp: BigInt

  snapshots: [LoanSnapshot!]  @derivedFrom(field: "loan")
  liquidation: Liquidation  @derivedFrom(field: "loan")
}

"""
Historical data of Loans
"""
type LoanSnapshot @entity {
  # {PoolAddress}-{tokenId}-{index}
  id: ID!
  # Loan Entity
  loan: Loan!
  # GammaPool interest rate at time loan is created/updated, maps to {GammaPool -> accFeeIndex}
  rateIndex: BigInt!
  # Initial loan debt in liquidity invariant units. Only increase when more liquidity is borrowed, decreases when liquidity is paid
  initLiquidity: BigInt!
  # Loan debt in liquidity invariant units, increases with every update according to how many blocks have passed
  liquidity: BigInt!
  # Initial loan debt in terms of LP tokens at time liquidity was borrowed, updates along with {initLiquidity}
  lpTokens: BigInt!
  # Reserved token0 amounts held as collateral for the liquidity debt
  collateral0: BigInt!
  # Reserved token1 amounts held as collateral for the liquidity debt
  collateral1: BigInt!
  # LoanSnapshot Type
  type: LoanSnapshotType!

  block: BigInt!
  timestamp: BigInt!
}

type Liquidation @entity {
  # {PoolAddress}-{tokenId}
  id: ID!
  pool: GammaPool!
  loan: Loan!
  liquidator: Account!

  # Collateral of loan being liquidated
  collateral: BigInt!
  # Liquidity debt being repaid
  liquidity: BigInt!
  # Amount of liquidity invariant being written down
  writeDown: BigInt!

  block: BigInt!
  timestamp: BigInt!
}

type Token @entity {
  # Token address
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  priceETH: BigDecimal!
  priceUSD: BigDecimal!
  isDerived: Boolean!
  lpBalanceBN: BigInt!
  lpBalanceUSD: BigDecimal!
  lpBalanceETH: BigDecimal!
  dsBalanceBN: BigInt!
  dsBalanceUSD: BigDecimal!
  dsBalanceETH: BigDecimal!
  gsBalanceBN: BigInt!
  gsBalanceUSD: BigDecimal!
  gsBalanceETH: BigDecimal!
  balanceBN: BigInt!
  balanceUSD: BigDecimal!
  balanceETH: BigDecimal!
  borrowedBalanceBN: BigInt!
  borrowedBalanceUSD: BigDecimal!
  borrowedBalanceETH: BigDecimal!
  protocols: [ProtocolToken!] @derivedFrom(field: "token")
}

type PoolBalance @entity {
  # {PoolAddress}-{account}
  id: ID!
  pool: GammaPool!
  protocol: Protocol!
  account: Account!
  balance: BigInt!
  balanceETH: BigDecimal!
  balanceUSD: BigDecimal!
  # Block number at which initial deposit was made
  initialBlock: BigInt!
  # Timestamp at which initial deposit was made
  initialTimestamp: BigInt!
}

type CollateralTokenBalance @entity {
  # {PoolAddress}-{tokenId}-{account}
  id: ID!
  pool: GammaPool!
  token: Token!
  account: Account!
  balance: BigInt!
}

type TotalCollateralTokenBalance @entity {
  # {tokenId}-{account}
  id: ID!
  token: Token!
  account: Account!
  balance: BigInt!
}

type Account @entity {
  # Account address
  id: ID!
  loans: [Loan!] @derivedFrom(field: "account")
  liquidations: [Liquidation!] @derivedFrom(field: "liquidator")
  poolBalances: [PoolBalance!] @derivedFrom(field: "account")
  collateralTokenBalances: [CollateralTokenBalance!] @derivedFrom(field: "account")
  totalCollateralTokenBalances: [TotalCollateralTokenBalance!] @derivedFrom(field: "account")
}

"""
Historical data of GammaPools
"""
interface PoolSnapshot @entity {
  id: ID!
  # {GammaPool}
  pool: GammaPool!
  # Pool updated timestamp
  timestamp: BigInt!
  # start timestamp of 5min/1hr/24hr segment
  tickTimestamp: BigInt!
  # Maps to {GammaPool -> lpBorrowedInvariant}
  borrowedLiquidity: BigInt!
  borrowedLiquidityETH: BigDecimal!
  borrowedLiquidityUSD: BigDecimal!
  # Pool tvl, maps to {GammaPool -> lpBorrowedInvariant + lpInvariant}
  totalLiquidity: BigInt!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  # Maps to {GammaPool -> utilizationRate}
  utilizationRate: BigInt!
  # Maps to {GammaPool -> borrowRate}
  borrowRate: BigInt!
  # Maps to {GammaPool -> accFeeIndex}
  accFeeIndex: BigInt!
  # # Indicates {accFeeIndex} increasement during timed interval, maps to {accFeeIndex[1] - accFeeIndex[0]}
  # accFeeIndexGrowth: BigInt!
  # Current price at CFMM for token0
  price0: BigInt!
  # Current price at CFMM for token1
  price1: BigInt!
  # GammaPool's GS-LP total supply
  totalSupply: BigInt!
  # Supply APY
  supplyAPY: BigDecimal!
  # Borrow APR
  borrowAPR: BigDecimal!
}

type FiveMinPoolSnapshot implements PoolSnapshot @entity {
  # {GammaPool Address}-{5mins interval}
  id: ID!
  # {GammaPool}
  pool: GammaPool!
  # Pool updated timestamp
  timestamp: BigInt!
  # start timestamp of 5min segment
  tickTimestamp: BigInt!
  # Maps to {GammaPool -> lpBorrowedInvariant}
  borrowedLiquidity: BigInt!
  borrowedLiquidityETH: BigDecimal!
  borrowedLiquidityUSD: BigDecimal!
  # Pool tvl, maps to {GammaPool -> lpBorrowedInvariant + lpInvariant}
  totalLiquidity: BigInt!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  # Maps to {GammaPool -> utilizationRate}
  utilizationRate: BigInt!
  # Maps to {GammaPool -> borrowRate}
  borrowRate: BigInt!
  # Maps to {GammaPool -> accFeeIndex}
  accFeeIndex: BigInt!
  # # Indicates {accFeeIndex} increasement during timed interval, maps to {accFeeIndex[1] - accFeeIndex[0]}
  # accFeeIndexGrowth: BigInt!
  # Current price at CFMM for token0
  price0: BigInt!
  # Current price at CFMM for token1
  price1: BigInt!
  # GammaPool's GS-LP total supply
  totalSupply: BigInt!
  # Supply APY
  supplyAPY: BigDecimal!
  # Borrow APR
  borrowAPR: BigDecimal!
}

type HourlyPoolSnapshot implements PoolSnapshot @entity {
  # {GammaPool Address}-{1hr interval}
  id: ID!
  # {GammaPool}
  pool: GammaPool!
  # Pool updated timestamp
  timestamp: BigInt!
  # start timestamp of 1hr segment
  tickTimestamp: BigInt!
  # Maps to {GammaPool -> lpBorrowedInvariant}
  borrowedLiquidity: BigInt!
  borrowedLiquidityETH: BigDecimal!
  borrowedLiquidityUSD: BigDecimal!
  # Pool tvl, maps to {GammaPool -> lpBorrowedInvariant + lpInvariant}
  totalLiquidity: BigInt!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  # Maps to {GammaPool -> utilizationRate}
  utilizationRate: BigInt!
  # Maps to {GammaPool -> borrowRate}
  borrowRate: BigInt!
  # Maps to {GammaPool -> accFeeIndex}
  accFeeIndex: BigInt!
  # # Indicates {accFeeIndex} increasement during timed interval, maps to {accFeeIndex[1] - accFeeIndex[0]}
  # accFeeIndexGrowth: BigInt!
  # Current price at CFMM for token0
  price0: BigInt!
  # Current price at CFMM for token1
  price1: BigInt!
  # GammaPool's GS-LP total supply
  totalSupply: BigInt!
  # Supply APY
  supplyAPY: BigDecimal!
  # Borrow APR
  borrowAPR: BigDecimal!
}

type DailyPoolSnapshot implements PoolSnapshot @entity {
  # {GammaPool Address}-{24hr interval}
  id: ID!
  # {GammaPool}
  pool: GammaPool!
  # Pool updated timestamp
  timestamp: BigInt!
  # start timestamp of 24hr segment
  tickTimestamp: BigInt!
  # Maps to {GammaPool -> lpBorrowedInvariant}
  borrowedLiquidity: BigInt!
  borrowedLiquidityETH: BigDecimal!
  borrowedLiquidityUSD: BigDecimal!
  # Pool tvl, maps to {GammaPool -> lpBorrowedInvariant + lpInvariant}
  totalLiquidity: BigInt!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  # Maps to {GammaPool -> utilizationRate}
  utilizationRate: BigInt!
  # Maps to {GammaPool -> borrowRate}
  borrowRate: BigInt!
  # Maps to {GammaPool -> accFeeIndex}
  accFeeIndex: BigInt!
  # # Indicates {accFeeIndex} increasement during timed interval, maps to {accFeeIndex[1] - accFeeIndex[0]}
  # accFeeIndexGrowth: BigInt!
  # Current price at CFMM for token0
  price0: BigInt!
  # Current price at CFMM for token1
  price1: BigInt!
  # GammaPool's GS-LP total supply
  totalSupply: BigInt!
  # Supply APY
  supplyAPY: BigDecimal!
  # Borrow APR
  borrowAPR: BigDecimal!
}

type Protocol @entity {
  id: ID!
  # pools: [GammaPool!] @derivedFrom(field: "protocol")
  tokens: [ProtocolToken!] @derivedFrom(field: "protocol")
}

type ProtocolToken @entity {
  id: ID!
  protocol: Protocol!
  token: Token!
}

"""
Keep track of last pool snapshots for GammaPool
Internally used to fill in missing ticks for pool snapshot entities
"""
type GammaPoolTracer @entity {
  # {GammaPool address}
  id: ID!
  # {GammaPool}
  pool: GammaPool!
  # last 5min pool snapshot
  lastFiveMinData: FiveMinPoolSnapshot
  # last 1hr pool snapshots
  lastHourlyData: HourlyPoolSnapshot
  # last 24hr pool snapshots
  lastDailyData: DailyPoolSnapshot
}

type RewardTracker @entity {
  id: ID!
  isFeeTracker: Boolean!
  distributor: RewardDistributor!
  gsPool: GammaPool
  depositTokens: [Bytes!]
  totalSupply: BigInt!
  cumulativeRewardPerToken: BigInt!
}

type RewardDistributor @entity {
  id: ID!
  isBonusDistributor: Boolean!
  rewardToken: Bytes!
  tokensPerInterval: BigInt!
  lastDistributionTime: BigInt!
  rewardTracker: RewardTracker! @derivedFrom(field: "distributor")
  paused: Boolean!
}

"""
Track DeltaSwap pairs if present to update token prices
"""
type DeltaSwapPair @entity {
  id: ID! # pair address
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
  protocol: BigInt!
  totalSupply: BigInt!
  pool: GammaPool!
  timestamp: BigInt!
}

"""
About this subgraph
"""
type About @entity {
  id: ID! #random
  version: String!
  network: String!
  totalLPBalanceUSD: BigDecimal!
  totalLPBalanceETH: BigDecimal!
  totalDSBalanceUSD: BigDecimal!
  totalDSBalanceETH: BigDecimal!
  totalGSBalanceUSD: BigDecimal!
  totalGSBalanceETH: BigDecimal!
  totalPools: BigInt!
  totalLoans: BigInt!
  totalActiveLoans: BigInt!
  totalTvlETH: BigDecimal!
  totalTvlUSD: BigDecimal!
  totalBorrowedETH: BigDecimal!
  totalBorrowedUSD: BigDecimal!
}