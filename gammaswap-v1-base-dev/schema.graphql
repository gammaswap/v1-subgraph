type FeeUpdate @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  to: Bytes! # address
  protocolFee: Int! # uint16
  origFeeShare: Int! # uint16
  isSet: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  currentOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolCreated @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  cfmm: Bytes! # address
  protocolId: Int! # uint16
  implementation: Bytes! # address
  tokens: [Bytes!]! # address[]
  count: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolParamsUpdate @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  origFee: Int! # uint16
  extSwapFee: Int! # uint8
  emaMultiplier: Int! # uint8
  minUtilRate1: Int! # uint8
  minUtilRate2: Int! # uint8
  feeDivisor: Int! # uint16
  liquidationFee: Int! # uint8
  ltvThreshold: Int! # uint8
  minBorrow: BigInt! # uint72
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RateParamsUpdate @entity(immutable: true) {
  id: Bytes!
  pool: Bytes! # address
  data: Bytes! # bytes
  active: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
